/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi
Eliminadas producciones para manejar globos
Agregado el esqueleto para la traduccion
Modificado por Silvia Takahashi 
Re: Agregar Reglas para el manejo de globos
Modificado por Saulo Daza y Sonia Vivas
Modificado por Silvia Takahashi
Eliminadas reglas de traducci�n DE  MARCROS
Cambio del lenguaje de comandos
Modificado por Silvia Takahashi: algunas Reglas para traduccion
Modificado por Silvia Takahashi: Cambio en el lenguaje
Abril: 2008 - Simplificado apra solo interpretaci�n
 **/

options 
{
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
//	| "\n"
}

TOKEN: /* Nombres de Comandos */
{
	< MOVE: "MOVE" > //INT where n is a number or a previously defined variable
| 	< RIGHT: "RIGHT" > //INT where n is a number or a previously defined variable
|	< LEFT: "LEFT" > //INT where n is a number or a previously defined variable
|	< ROTATE: "ROTATE" > //INT where n is a number or a previously defined variable
|	< LOOK: "LOOK" > // STRING where O can be N, E, W, or S
|	< DROP: "DROP" > // INT where n is a number or a previously defined variable
|	< FREE: "FREE" > // INT where n is a number or a previously defined variable
|	< PICK: "PICK" > // INT where n is a number or a previously defined variable
|	< POP: "POP" > // INT where n is a number or a previously defined variable
|	< CHECK: "CHECK" > // where O is either C for chips, or B for balloons, and n is a previously defined variable or a number
|	< BLOCKEDP: "BLOCKEDP" > //Boolean
|	< NOP: "NOP" > // The Robot doesn't do anything
}

TOKEN :
{
		<T_BALLOONS:  "BALLOONS" >
		|	<T_CHIPS:     "CHIPS"  >	

}


TOKEN :
{
		<NUMERO: (<DIGIT>)+ >
		|  	<#DIGIT: ["0"-"9"] >
}


	boolean command(StringBuffer sistema) :
	{	
		
		int x;
		salida=new String();
		
	}
	
	{
		(
		   <T_TURNRIGHT> "(" ")" {world.turnRight();salida = "Command: Turnright";}
		| 	<T_MOVER>  "(" x=numero() ")" {world.moveForward(x);salida = "Command: Moveforward ";}  
		|  <T_PONER> "("  objetoPoner() ")"					  			
		|  <T_RECOGER> "("  objetoRecoger()  ")"	
	    |  < T_POP > "(" x=numero() ")" {world.popBalloons(x); salida = "Comando:  Pop";}
		) "\n" 

		{
		  //  try {
	    	//		 Thread.sleep(1);
	    	  //   } catch (InterruptedException e) {
	    		//	        System.err.format("IOException: %s%n", e);
	    		//	    }
	    			 
			sistema.append(salida);
			return true;
		}

     |  "\n" { return true; }

		| <EOF> {return false;} 
	}

	void objetoPoner() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>    "," f=numero() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <T_BALLOONS>   "," f=numero() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void objetoRecoger() :
	{
		int f=1;	
	}
	{
		( <T_CHIPS>   "," f=numero() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <T_BALLOONS>   "," f=numero() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 *  reconoce un numero entero sin signo
	 * @return el valor entero correspondiente al valor reconocido
	 */

	int numero() throws Error:
	{	
		int total=1;
	}
	{
		<NUMERO>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				// Dada la forma de NUMERO, sabemos que solo puede tener d�gitos
				// Por lo tanto, lo unico que podria pasar es que el numero sea muy grande
				throw new Error("Number out of bounds: "+token.image+"!!");
			}
			return total;
		}
	}

	